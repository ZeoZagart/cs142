!function(Q){var F={};function U(B){if(F[B])return F[B].exports;var l=F[B]={i:B,l:!1,exports:{}};return Q[B].call(l.exports,l,l.exports,U),l.l=!0,l.exports}U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},U.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},U.t=function(Q,F){if(1&F&&(Q=U(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(U.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var l in Q)U.d(B,l,function(F){return Q[F]}.bind(null,l));return B},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},U.p="public",U(U.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./tsfiles/DropDowns.ts\nclass DropDownUtils {\n    static getYearsDropDown(id, currentYear) {\n        if (currentYear < 1970)\n            throw new Error("Wrong Year Exception");\n        let years = new Array(currentYear - 1970 + 1);\n        for (let index = 1970; index <= currentYear; index++) {\n            years[index - 1970] = index;\n        }\n        let yearOptions = DropDownUtils.getDropDown(years);\n        let yearSelector = document.createElement("select");\n        yearSelector.id = id;\n        yearOptions.forEach(option => yearSelector.add(option));\n        return yearSelector;\n    }\n    static getMonthsDropDown(id) {\n        let monthOptions = DropDownUtils.getDropDown(this.MONTHS);\n        let monthSelector = document.createElement("select");\n        monthSelector.id = id;\n        monthOptions.forEach(option => monthSelector.add(option));\n        return monthSelector;\n    }\n    static getMonthIndex(value) {\n        return this.MONTHS.indexOf(value);\n    }\n    static getDropDown(elements) {\n        let optionElements = new Array(elements.length);\n        elements.forEach(optionName => {\n            let option = document.createElement("option");\n            option.id = optionName.toString();\n            option.text = optionName.toString();\n            optionElements.push(option);\n        });\n        return optionElements;\n    }\n}\nDropDownUtils.MONTHS = ["January", "Feburary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];\n\n// CONCATENATED MODULE: ./tsfiles/Utils.ts\nconst excludeEnd = (start, end) => getRange(start, end - 1);\nconst excludeStart = (start, end) => getRange(start + 1, end);\nconst getRange = (start, end) => {\n    let array = new Array();\n    for (let i = start; i <= end; i++) {\n        array.push(i);\n    }\n    return array;\n};\n\n\n// CONCATENATED MODULE: ./tsfiles/CalendarView.ts\n\nclass CalendarView_CalendarView {\n    static getCalendarTable(id, month, year, onclick) {\n        let calendarTable = document.createElement("table");\n        calendarTable.id = id;\n        this.addCalendarHeader(calendarTable);\n        this.addCalendarWeeks(calendarTable, new Date(year, month, 1), onclick);\n        return calendarTable;\n    }\n    static addCalendarWeeks(calendarTable, date, onclick) {\n        let numdays = getNumDays(date);\n        let [firstWeek, firstWeekend, prevMonthExclusion] = CalendarView_CalendarView.getFirstWeek(date);\n        let nextMonthInclusions = getRange(1, 6 - getMonthEndDay(date));\n        let added = 0;\n        while (added < numdays) {\n            if (added == 0) {\n                this.addRowAsDays(calendarTable, firstWeek, prevMonthExclusion, onclick);\n                added += firstWeekend;\n            }\n            else if (added + 7 >= numdays) {\n                this.addRowAsDays(calendarTable, excludeStart(added, numdays).concat(nextMonthInclusions), new Set(nextMonthInclusions), onclick);\n                added += numdays - added;\n            }\n            else {\n                this.addRowAsDays(calendarTable, excludeStart(added, added + 7), new Set(), onclick);\n                added += 7;\n            }\n        }\n    }\n    static getFirstWeek(date) {\n        let firstDay = getMonthStartDay(date);\n        let prevMonthNumDays = new Date(date.getFullYear(), date.getMonth(), 0).getDate();\n        let firstWeekend = 7 - firstDay;\n        let exlusion = excludeStart(prevMonthNumDays - firstDay, prevMonthNumDays);\n        console.log("ES : " + excludeStart(prevMonthNumDays - firstDay, prevMonthNumDays));\n        return [exlusion.concat(getRange(1, firstWeekend)), firstWeekend, new Set(exlusion)];\n    }\n    static addRowAsDays(table, days, excluded, onclick) {\n        let row = table.insertRow();\n        days.forEach(day => {\n            let cell = row.insertCell();\n            let text = document.createTextNode(day.toString());\n            cell.appendChild(text);\n            if (excluded.has(day))\n                cell.style.backgroundColor = "gray";\n            else {\n                cell.onclick = onclick;\n            }\n        });\n    }\n    static addCalendarHeader(table) {\n        let head = table.createTHead();\n        let row = head.insertRow();\n        DAYS.forEach(day => {\n            let th = document.createElement("th");\n            let text = document.createTextNode(day);\n            th.appendChild(text);\n            row.appendChild(th);\n        });\n        return head;\n    }\n}\nlet DAYS = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];\nlet getMonthStartDay = (date) => new Date(date.getFullYear(), date.getMonth(), 1).getDay();\nlet getMonthEndDay = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDay();\nlet getNumDays = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\n// CONCATENATED MODULE: ./tsfiles/DatePicker.ts\n\n\nclass DatePicker_DatePicker {\n    constructor(id, onclick) {\n        this.MONTH_DROP_DOWN_ID = "month-drop-down";\n        this.YEAR_DROP_DOWN_ID = "year-drop-down";\n        this.CALENDAR_TABLE_ID = "calendar-table";\n        this.selectedYear = 2020;\n        this.selectedMonth = 1;\n        this.id = id;\n        this.onclick = onclick;\n    }\n    render(month, year) {\n        this.selectedMonth = Math.floor(month);\n        this.selectedYear = Math.floor(year);\n        this.calendarDiv = document.getElementById(this.id);\n        let monthDropDown = DropDownUtils.getMonthsDropDown(this.MONTH_DROP_DOWN_ID);\n        let yearDropDown = DropDownUtils.getYearsDropDown(this.YEAR_DROP_DOWN_ID, year);\n        let calendarTable = CalendarView_CalendarView.getCalendarTable(this.CALENDAR_TABLE_ID, month, year, this.onclick);\n        monthDropDown.selectedIndex = this.selectedMonth;\n        yearDropDown.selectedIndex = yearDropDown.options.length - 1;\n        monthDropDown.addEventListener("change", (event) => {\n            let newMonth = monthDropDown.value;\n            this.reRenderTable(DropDownUtils.getMonthIndex(newMonth), this.selectedYear);\n        });\n        yearDropDown.addEventListener("change", (event) => {\n            let newYear = yearDropDown.value;\n            this.reRenderTable(this.selectedMonth, Number.parseInt(newYear));\n        });\n        this.calendarDiv.appendChild(monthDropDown);\n        this.calendarDiv.appendChild(yearDropDown);\n        this.calendarDiv.appendChild(calendarTable);\n    }\n    reRenderTable(month, year) {\n        let oldCalendarTable = this.calendarDiv.querySelector(`#${this.CALENDAR_TABLE_ID}`);\n        let newCalendarTable = CalendarView_CalendarView.getCalendarTable(this.CALENDAR_TABLE_ID, month, year, this.onclick);\n        this.selectedMonth = month;\n        this.selectedYear = year;\n        oldCalendarTable === null || oldCalendarTable === void 0 ? void 0 : oldCalendarTable.replaceWith(newCalendarTable);\n    }\n}\nlet doOnClick = () => { console.log("pokemon click"); };\nlet dp1 = new DatePicker_DatePicker("datepicker1", doOnClick);\ndp1.render(new Date().getMonth(), new Date().getFullYear());\nlet dp2 = new DatePicker_DatePicker("datepicker2", doOnClick);\n// dp2.render(8, 2020)\nlet renderFn = dp2.render;\nrenderFn(8, 2020);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90c2ZpbGVzL0Ryb3BEb3ducy50cz82ZjllIiwid2VicGFjazovLy8uL3RzZmlsZXMvVXRpbHMudHM/OWI1NSIsIndlYnBhY2s6Ly8vLi90c2ZpbGVzL0NhbGVuZGFyVmlldy50cz9kYTI2Iiwid2VicGFjazovLy8uL3RzZmlsZXMvRGF0ZVBpY2tlci50cz9lZGRiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFTyxNQUFNLGFBQWE7SUFHdEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQVUsRUFBRSxXQUFtQjtRQUNuRCxJQUFJLFdBQVcsR0FBRyxJQUFJO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQztRQUMvRCxJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUM3QyxLQUFLLElBQUksS0FBSyxHQUFHLElBQUksRUFBRSxLQUFLLElBQUksV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQUUsS0FBSyxDQUFDLEtBQUssR0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLO1NBQUU7UUFDbkYsSUFBSSxXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDbEQsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDbkQsWUFBWSxDQUFDLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sWUFBWTtJQUN2QixDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQVU7UUFDL0IsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pELElBQUksYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMs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cmNlc0NvbnRlbnQiOlsidHlwZSBEcm9wZG93bk9wdGlvblR5cGUgPSBudW1iZXIgfCBzdHJpbmdcblxuZXhwb3J0IGNsYXNzIERyb3BEb3duVXRpbHMge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE1PTlRIUyA9IFtcIkphbnVhcnlcIiwgXCJGZWJ1cmFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdO1xuXG4gICAgc3RhdGljIGdldFllYXJzRHJvcERvd24oaWQ6IHN0cmluZywgY3VycmVudFllYXI6IG51bWJlcik6IEhUTUxTZWxlY3RFbGVtZW50IHtcbiAgICAgICAgaWYgKGN1cnJlbnRZZWFyIDwgMTk3MCkgdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgWWVhciBFeGNlcHRpb25cIilcbiAgICAgICAgbGV0IHllYXJzID0gbmV3IEFycmF5KGN1cnJlbnRZZWFyIC0gMTk3MCArIDEpXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMTk3MDsgaW5kZXggPD0gY3VycmVudFllYXI7IGluZGV4KyspIHsgeWVhcnNbaW5kZXgtMTk3MF0gPSBpbmRleCB9XG4gICAgICAgIGxldCB5ZWFyT3B0aW9ucyA9IERyb3BEb3duVXRpbHMuZ2V0RHJvcERvd24oeWVhcnMpXG4gICAgICAgIGxldCB5ZWFyU2VsZWN0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpXG4gICAgICAgIHllYXJTZWxlY3Rvci5pZCA9IGlkXG4gICAgICAgIHllYXJPcHRpb25zLmZvckVhY2gob3B0aW9uID0+IHllYXJTZWxlY3Rvci5hZGQob3B0aW9uKSlcbiAgICAgICAgcmV0dXJuIHllYXJTZWxlY3RvclxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRNb250aHNEcm9wRG93bihpZDogc3RyaW5nKTogSFRNTFNlbGVjdEVsZW1lbnQge1xuICAgICAgICBsZXQgbW9udGhPcHRpb25zID0gRHJvcERvd25VdGlscy5nZXREcm9wRG93bih0aGlzLk1PTlRIUylcbiAgICAgICAgbGV0IG1vbnRoU2VsZWN0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpXG4gICAgICAgIG1vbnRoU2VsZWN0b3IuaWQgPSBpZFxuICAgICAgICBtb250aE9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4gbW9udGhTZWxlY3Rvci5hZGQob3B0aW9uKSlcbiAgICAgICAgcmV0dXJuIG1vbnRoU2VsZWN0b3JcbiAgICB9IFxuXG4gICAgc3RhdGljIGdldE1vbnRoSW5kZXgodmFsdWU6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLk1PTlRIUy5pbmRleE9mKHZhbHVlKVxuICAgIH1cblxuICAgcHJpdmF0ZSBzdGF0aWMgZ2V0RHJvcERvd24oZWxlbWVudHM6IEFycmF5PERyb3Bkb3duT3B0aW9uVHlwZT4pOiBBcnJheTxIVE1MT3B0aW9uRWxlbWVudD4ge1xuICAgICAgICBsZXQgb3B0aW9uRWxlbWVudHMgPSBuZXcgQXJyYXk8SFRNTE9wdGlvbkVsZW1lbnQ+KGVsZW1lbnRzLmxlbmd0aClcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChvcHRpb25OYW1lPT57XG4gICAgICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKVxuICAgICAgICAgICAgb3B0aW9uLmlkID0gb3B0aW9uTmFtZS50b1N0cmluZygpXG4gICAgICAgICAgICBvcHRpb24udGV4dCA9IG9wdGlvbk5hbWUudG9TdHJpbmcoKVxuICAgICAgICAgICAgb3B0aW9uRWxlbWVudHMucHVzaChvcHRpb24pXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBvcHRpb25FbGVtZW50c1xuICAgIH1cbn0iLCJjb25zdCBleGNsdWRlRW5kID0gKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSA9PiBnZXRSYW5nZShzdGFydCwgZW5kIC0gMSk7XG5jb25zdCBleGNsdWRlU3RhcnQgPSAoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpID0+IGdldFJhbmdlKHN0YXJ0ICsgMSwgZW5kKTtcbmNvbnN0IGdldFJhbmdlID0gKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogbnVtYmVyW10gPT4ge1xuICAgIGxldCBhcnJheSA9IG5ldyBBcnJheSgpO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgICAgICBhcnJheS5wdXNoKGkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCB7ZXhjbHVkZUVuZCwgZXhjbHVkZVN0YXJ0LCBnZXRSYW5nZX0iLCJpbXBvcnQgeyBnZXRSYW5nZSwgZXhjbHVkZVN0YXJ0IH0gZnJvbSBcIi4vVXRpbHNcIlxuXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJWaWV3IHtcbiAgICBzdGF0aWMgZ2V0Q2FsZW5kYXJUYWJsZShpZDogc3RyaW5nLCBtb250aDogbnVtYmVyLCB5ZWFyOiBudW1iZXIsIG9uY2xpY2s6ICgpID0+IHZvaWQpOiBIVE1MVGFibGVFbGVtZW50IHtcbiAgICAgICAgbGV0IGNhbGVuZGFyVGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIilcbiAgICAgICAgY2FsZW5kYXJUYWJsZS5pZCA9IGlkXG4gICAgICAgIHRoaXMuYWRkQ2FsZW5kYXJIZWFkZXIoY2FsZW5kYXJUYWJsZSlcbiAgICAgICAgdGhpcy5hZGRDYWxlbmRhcldlZWtzKGNhbGVuZGFyVGFibGUsIG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKSwgb25jbGljaylcbiAgICAgICAgcmV0dXJuIGNhbGVuZGFyVGFibGVcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBhZGRDYWxlbmRhcldlZWtzKGNhbGVuZGFyVGFibGU6IEhUTUxUYWJsZUVsZW1lbnQsIGRhdGU6IERhdGUsIG9uY2xpY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgbGV0IG51bWRheXMgPSBnZXROdW1EYXlzKGRhdGUpXG4gICAgICAgIGxldCBbZmlyc3RXZWVrLCBmaXJzdFdlZWtlbmQsIHByZXZNb250aEV4Y2x1c2lvbl0gPSBDYWxlbmRhclZpZXcuZ2V0Rmlyc3RXZWVrKGRhdGUpXG4gICAgICAgIGxldCBuZXh0TW9udGhJbmNsdXNpb25zID0gZ2V0UmFuZ2UoMSwgNiAtIGdldE1vbnRoRW5kRGF5KGRhdGUpKVxuXG4gICAgICAgIGxldCBhZGRlZCA9IDBcbiAgICAgICAgd2hpbGUoYWRkZWQgPCBudW1kYXlzKSB7XG4gICAgICAgICAgICBpZiAoYWRkZWQgPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUm93QXNEYXlzKGNhbGVuZGFyVGFibGUsIGZpcnN0V2VlaywgcHJldk1vbnRoRXhjbHVzaW9uLCBvbmNsaWNrKVxuICAgICAgICAgICAgICAgIGFkZGVkICs9IGZpcnN0V2Vla2VuZFxuICAgICAgICAgICAgfSBlbHNlIGlmIChhZGRlZCArIDcgPj0gbnVtZGF5cykge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUm93QXNEYXlzKGNhbGVuZGFyVGFibGUsIGV4Y2x1ZGVTdGFydChhZGRlZCwgbnVtZGF5cykuY29uY2F0KG5leHRNb250aEluY2x1c2lvbnMpLCBuZXcgU2V0KG5leHRNb250aEluY2x1c2lvbnMpLCBvbmNsaWNrKVxuICAgICAgICAgICAgICAgIGFkZGVkICs9IG51bWRheXMgLSBhZGRlZFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFJvd0FzRGF5cyhjYWxlbmRhclRhYmxlLCBleGNsdWRlU3RhcnQoYWRkZWQsIGFkZGVkICsgNyksIG5ldyBTZXQoKSwgb25jbGljaylcbiAgICAgICAgICAgICAgICBhZGRlZCArPSA3XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRGaXJzdFdlZWsoZGF0ZTogRGF0ZSk6IFtudW1iZXJbXSwgbnVtYmVyLCBTZXQ8bnVtYmVyPl0ge1xuICAgICAgICBsZXQgZmlyc3REYXkgPSBnZXRNb250aFN0YXJ0RGF5KGRhdGUpXG4gICAgICAgIGxldCBwcmV2TW9udGhOdW1EYXlzID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIDApLmdldERhdGUoKVxuICAgICAgICBsZXQgZmlyc3RXZWVrZW5kID0gNyAtIGZpcnN0RGF5XG4gICAgICAgIGxldCBleGx1c2lvbiA9IGV4Y2x1ZGVTdGFydChwcmV2TW9udGhOdW1EYXlzIC0gZmlyc3REYXksIHByZXZNb250aE51bURheXMpXG4gICAgICAgIGNvbnNvbGUubG9nKFwiRVMgOiBcIiArIGV4Y2x1ZGVTdGFydChwcmV2TW9udGhOdW1EYXlzIC0gZmlyc3REYXksIHByZXZNb250aE51bURheXMpKVxuICAgICAgICByZXR1cm4gW2V4bHVzaW9uLmNvbmNhdChnZXRSYW5nZSgxLCBmaXJzdFdlZWtlbmQpKSwgZmlyc3RXZWVrZW5kLCBuZXcgU2V0KGV4bHVzaW9uKV1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBhZGRSb3dBc0RheXModGFibGU6IEhUTUxUYWJsZUVsZW1lbnQsIGRheXM6IEFycmF5PG51bWJlcj4sIGV4Y2x1ZGVkOiBTZXQ8bnVtYmVyPiwgb25jbGljazogKCkgPT4gdm9pZCkge1xuICAgICAgICBsZXQgcm93ID0gdGFibGUuaW5zZXJ0Um93KClcbiAgICAgICAgZGF5cy5mb3JFYWNoKGRheSA9PiB7XG4gICAgICAgICAgICBsZXQgY2VsbCA9IHJvdy5pbnNlcnRDZWxsKClcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF5LnRvU3RyaW5nKCkpXG4gICAgICAgICAgICBjZWxsLmFwcGVuZENoaWxkKHRleHQpXG4gICAgICAgICAgICBpZiAoZXhjbHVkZWQuaGFzKGRheSkpIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmF5XCJcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNlbGwub25jbGljayA9IG9uY2xpY2tcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBhZGRDYWxlbmRhckhlYWRlcih0YWJsZTogSFRNTFRhYmxlRWxlbWVudCk6IEhUTUxUYWJsZVNlY3Rpb25FbGVtZW50IHtcbiAgICAgICAgbGV0IGhlYWQgPSB0YWJsZS5jcmVhdGVUSGVhZCgpXG4gICAgICAgIGxldCByb3cgPSBoZWFkLmluc2VydFJvdygpXG4gICAgICAgIERBWVMuZm9yRWFjaChkYXkgPT4ge1xuICAgICAgICAgICAgbGV0IHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpXG4gICAgICAgICAgICBsZXQgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRheSlcbiAgICAgICAgICAgIHRoLmFwcGVuZENoaWxkKHRleHQpXG4gICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQodGgpXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBoZWFkXG4gICAgfVxufVxuXG5sZXQgREFZUyA9IFtcIlNVXCIsIFwiTU9cIiwgXCJUVVwiLCBcIldFXCIsIFwiVEhcIiwgXCJGUlwiLCBcIlNBXCJdO1xuXG5sZXQgZ2V0TW9udGhTdGFydERheSA9IChkYXRlOiBEYXRlKSA9PiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgMSkuZ2V0RGF5KCk7XG5sZXQgZ2V0TW9udGhFbmREYXkgPSAoZGF0ZTogRGF0ZSkgPT4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKyAxLCAwKS5nZXREYXkoKTtcbmxldCBnZXROdW1EYXlzID0gKGRhdGU6IERhdGUpID0+IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgMCkuZ2V0RGF0ZSgpOyIsImltcG9ydCB7IERyb3BEb3duVXRpbHMgfSBmcm9tIFwiLi9Ecm9wRG93bnNcIjtcbmltcG9ydCB7IENhbGVuZGFyVmlldyB9IGZyb20gXCIuL0NhbGVuZGFyVmlld1wiO1xuXG5jbGFzcyBEYXRlUGlja2VyIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IE1PTlRIX0RST1BfRE9XTl9JRCA9IFwibW9udGgtZHJvcC1kb3duXCJcbiAgICBwcml2YXRlIHJlYWRvbmx5IFlFQVJfRFJPUF9ET1dOX0lEID0gXCJ5ZWFyLWRyb3AtZG93blwiXG4gICAgcHJpdmF0ZSByZWFkb25seSBDQUxFTkRBUl9UQUJMRV9JRCA9IFwiY2FsZW5kYXItdGFibGVcIlxuICAgIHByaXZhdGUgY2FsZW5kYXJEaXYhOiBIVE1MRWxlbWVudDtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaWQ6IHN0cmluZ1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb25jbGljazogKCkgPT4gdm9pZFxuXG4gICAgcHJpdmF0ZSBzZWxlY3RlZFllYXI6IG51bWJlciA9IDIwMjA7XG4gICAgcHJpdmF0ZSBzZWxlY3RlZE1vbnRoOiBudW1iZXIgPSAxO1xuXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgb25jbGljazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmlkID0gaWRcbiAgICAgICAgdGhpcy5vbmNsaWNrID0gb25jbGlja1xuICAgIH1cblxuICAgIHJlbmRlcihtb250aDogbnVtYmVyLCB5ZWFyOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE1vbnRoID0gTWF0aC5mbG9vcihtb250aClcbiAgICAgICAgdGhpcy5zZWxlY3RlZFllYXIgPSBNYXRoLmZsb29yKHllYXIpXG4gICAgICAgIHRoaXMuY2FsZW5kYXJEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKSFcbiAgICAgICAgbGV0IG1vbnRoRHJvcERvd246IEhUTUxTZWxlY3RFbGVtZW50ID0gRHJvcERvd25VdGlscy5nZXRNb250aHNEcm9wRG93bih0aGlzLk1PTlRIX0RST1BfRE9XTl9JRClcbiAgICAgICAgbGV0IHllYXJEcm9wRG93bjogSFRNTFNlbGVjdEVsZW1lbnQgPSBEcm9wRG93blV0aWxzLmdldFllYXJzRHJvcERvd24odGhpcy5ZRUFSX0RST1BfRE9XTl9JRCwgeWVhcilcbiAgICAgICAgbGV0IGNhbGVuZGFyVGFibGU6IEhUTUxUYWJsZUVsZW1lbnQgPSBDYWxlbmRhclZpZXcuZ2V0Q2FsZW5kYXJUYWJsZSh0aGlzLkNBTEVOREFSX1RBQkxFX0lELCBtb250aCwgeWVhciwgdGhpcy5vbmNsaWNrKVxuICAgICAgICBtb250aERyb3BEb3duLnNlbGVjdGVkSW5kZXggPSB0aGlzLnNlbGVjdGVkTW9udGhcbiAgICAgICAgeWVhckRyb3BEb3duLnNlbGVjdGVkSW5kZXggPSB5ZWFyRHJvcERvd24ub3B0aW9ucy5sZW5ndGggLSAxXG4gICAgICAgIG1vbnRoRHJvcERvd24uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLChldmVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld01vbnRoOiBzdHJpbmcgPSBtb250aERyb3BEb3duLnZhbHVlXG4gICAgICAgICAgICB0aGlzLnJlUmVuZGVyVGFibGUoRHJvcERvd25VdGlscy5nZXRNb250aEluZGV4KG5ld01vbnRoKSwgdGhpcy5zZWxlY3RlZFllYXIpXG4gICAgICAgIH0pXG4gICAgICAgIHllYXJEcm9wRG93bi5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld1llYXI6IHN0cmluZyA9IHllYXJEcm9wRG93bi52YWx1ZVxuICAgICAgICAgICAgdGhpcy5yZVJlbmRlclRhYmxlKHRoaXMuc2VsZWN0ZWRNb250aCwgTnVtYmVyLnBhcnNlSW50KG5ld1llYXIpKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmNhbGVuZGFyRGl2LmFwcGVuZENoaWxkKG1vbnRoRHJvcERvd24pXG4gICAgICAgIHRoaXMuY2FsZW5kYXJEaXYuYXBwZW5kQ2hpbGQoeWVhckRyb3BEb3duKVxuICAgICAgICB0aGlzLmNhbGVuZGFyRGl2LmFwcGVuZENoaWxkKGNhbGVuZGFyVGFibGUpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZVJlbmRlclRhYmxlKG1vbnRoOiBudW1iZXIsIHllYXI6IG51bWJlcikge1xuICAgICAgICBsZXQgb2xkQ2FsZW5kYXJUYWJsZSA9IHRoaXMuY2FsZW5kYXJEaXYucXVlcnlTZWxlY3RvcihgIyR7dGhpcy5DQUxFTkRBUl9UQUJMRV9JRH1gKVxuICAgICAgICBsZXQgbmV3Q2FsZW5kYXJUYWJsZTogSFRNTFRhYmxlRWxlbWVudCA9IENhbGVuZGFyVmlldy5nZXRDYWxlbmRhclRhYmxlKHRoaXMuQ0FMRU5EQVJfVEFCTEVfSUQsIG1vbnRoLCB5ZWFyLCB0aGlzLm9uY2xpY2spXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRNb250aCA9IG1vbnRoXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRZZWFyID0geWVhclxuICAgICAgICBvbGRDYWxlbmRhclRhYmxlPy5yZXBsYWNlV2l0aChuZXdDYWxlbmRhclRhYmxlKVxuICAgIH1cbn1cblxubGV0IGRvT25DbGljayA9ICgpID0+IHsgY29uc29sZS5sb2coXCJwb2tlbW9uIGNsaWNrXCIpfVxubGV0IGRwMSA9IG5ldyBEYXRlUGlja2VyKFwiZGF0ZXBpY2tlcjFcIiwgZG9PbkNsaWNrKVxuZHAxLnJlbmRlcihuZXcgRGF0ZSgpLmdldE1vbnRoKCksIG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSlcblxubGV0IGRwMiA9IG5ldyBEYXRlUGlja2VyKFwiZGF0ZXBpY2tlcjJcIiwgZG9PbkNsaWNrKVxuLy8gZHAyLnJlbmRlcig4LCAyMDIwKVxubGV0IHJlbmRlckZuID0gZHAyLnJlbmRlcjtcbnJlbmRlckZuKDgsIDIwMjApIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')}]);