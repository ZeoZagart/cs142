!function(F){var Q={};function U(B){if(Q[B])return Q[B].exports;var l=Q[B]={i:B,l:!1,exports:{}};return F[B].call(l.exports,l,l.exports,U),l.l=!0,l.exports}U.m=F,U.c=Q,U.d=function(F,Q,B){U.o(F,Q)||Object.defineProperty(F,Q,{enumerable:!0,get:B})},U.r=function(F){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(F,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(F,"__esModule",{value:!0})},U.t=function(F,Q){if(1&Q&&(F=U(F)),8&Q)return F;if(4&Q&&"object"==typeof F&&F&&F.__esModule)return F;var B=Object.create(null);if(U.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:F}),2&Q&&"string"!=typeof F)for(var l in F)U.d(B,l,function(Q){return F[Q]}.bind(null,l));return B},U.n=function(F){var Q=F&&F.__esModule?function(){return F.default}:function(){return F};return U.d(Q,"a",Q),Q},U.o=function(F,Q){return Object.prototype.hasOwnProperty.call(F,Q)},U.p="public",U(U.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./tsfiles/DropDowns.ts\nclass DropDownUtils {\n    static getYearsDropDown(id, currentYear) {\n        if (currentYear < 1970)\n            throw new Error("Wrong Year Exception");\n        let years = new Array(currentYear - 1970 + 1);\n        for (let index = 1970; index <= currentYear; index++) {\n            years[index - 1970] = index;\n        }\n        let yearOptions = DropDownUtils.getDropDown(years);\n        let yearSelector = document.createElement("select");\n        yearSelector.id = id;\n        yearOptions.forEach(option => yearSelector.add(option));\n        return yearSelector;\n    }\n    static getMonthsDropDown(id) {\n        let monthOptions = DropDownUtils.getDropDown(this.MONTHS);\n        let monthSelector = document.createElement("select");\n        monthSelector.id = id;\n        monthOptions.forEach(option => monthSelector.add(option));\n        return monthSelector;\n    }\n    static getMonthIndex(value) {\n        return this.MONTHS.indexOf(value);\n    }\n    static getDropDown(elements) {\n        let optionElements = new Array(elements.length);\n        elements.forEach(optionName => {\n            let option = document.createElement("option");\n            option.id = optionName.toString();\n            option.text = optionName.toString();\n            optionElements.push(option);\n        });\n        return optionElements;\n    }\n}\nDropDownUtils.MONTHS = ["January", "Feburary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];\n\n// CONCATENATED MODULE: ./tsfiles/Utils.ts\nconst excludeEnd = (start, end) => getRange(start, end - 1);\nconst excludeStart = (start, end) => getRange(start + 1, end);\nconst getRange = (start, end) => {\n    let array = new Array();\n    for (let i = start; i <= end; i++) {\n        array.push(i);\n    }\n    return array;\n};\n\n\n// CONCATENATED MODULE: ./tsfiles/CalendarView.ts\n\nclass CalendarView_CalendarView {\n    static getCalendarTable(id, month, year) {\n        let calendarTable = document.createElement("table");\n        calendarTable.id = id;\n        this.addCalendarHeader(calendarTable);\n        this.addCalendarWeeks(calendarTable, new Date(year, month, 1));\n        return calendarTable;\n    }\n    static addCalendarWeeks(calendarTable, date) {\n        let numdays = getNumDays(date);\n        let [firstWeek, firstWeekend] = CalendarView_CalendarView.getFirstWeek(date);\n        let nextMonthInclusions = getRange(1, 6 - getMonthEndDay(date));\n        let added = 0;\n        while (added < numdays) {\n            if (added == 0) {\n                this.addRowAsDays(calendarTable, firstWeek);\n                added += firstWeekend;\n            }\n            else if (added + 7 >= numdays) {\n                this.addRowAsDays(calendarTable, excludeStart(added, numdays).concat(nextMonthInclusions));\n                added += numdays - added;\n            }\n            else {\n                this.addRowAsDays(calendarTable, excludeStart(added, added + 7));\n                added += 7;\n            }\n        }\n    }\n    static getFirstWeek(date) {\n        let firstDay = getMonthStartDay(date);\n        let prevMonthNumDays = new Date(date.getFullYear(), date.getMonth(), 0).getDate();\n        let firstWeekend = 7 - firstDay;\n        console.log("ES : " + excludeStart(prevMonthNumDays - firstDay, prevMonthNumDays));\n        return [excludeStart(prevMonthNumDays - firstDay, prevMonthNumDays).concat(getRange(1, firstWeekend)), firstWeekend];\n    }\n    static addRowAsDays(table, days) {\n        let row = table.insertRow();\n        days.forEach(day => {\n            let cell = row.insertCell();\n            let text = document.createTextNode(day.toString());\n            cell.appendChild(text);\n        });\n    }\n    static addCalendarHeader(table) {\n        let head = table.createTHead();\n        let row = head.insertRow();\n        DAYS.forEach(day => {\n            let th = document.createElement("th");\n            let text = document.createTextNode(day);\n            th.appendChild(text);\n            row.appendChild(th);\n        });\n        return head;\n    }\n}\nlet DAYS = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];\nlet getMonthStartDay = (date) => new Date(date.getFullYear(), date.getMonth(), 1).getDay();\nlet getMonthEndDay = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDay();\nlet getNumDays = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\n// CONCATENATED MODULE: ./tsfiles/DatePicker.ts\n\n\nclass DatePicker_DatePicker {\n    constructor(id, onclick) {\n        this.MONTH_DROP_DOWN_ID = "month-drop-down";\n        this.YEAR_DROP_DOWN_ID = "year-drop-down";\n        this.CALENDAR_TABLE_ID = "calendar-table";\n        this.selectedYear = 2020;\n        this.selectedMonth = 1;\n        this.id = id;\n        this.onclick = onclick;\n    }\n    render(month, year) {\n        this.selectedMonth = Math.floor(month);\n        this.selectedYear = Math.floor(year);\n        let calendarDiv = document.getElementById(this.id);\n        let monthDropDown = DropDownUtils.getMonthsDropDown(this.MONTH_DROP_DOWN_ID);\n        let yearDropDown = DropDownUtils.getYearsDropDown(this.YEAR_DROP_DOWN_ID, year);\n        let calendarTable = CalendarView_CalendarView.getCalendarTable(this.CALENDAR_TABLE_ID, month, year);\n        monthDropDown.selectedIndex = this.selectedMonth;\n        yearDropDown.selectedIndex = this.selectedYear;\n        monthDropDown.addEventListener("change", (event) => {\n            let newMonth = monthDropDown.value;\n            this.reRender(DropDownUtils.getMonthIndex(newMonth), this.selectedYear);\n        });\n        yearDropDown.addEventListener("change", (event) => {\n            let newYear = yearDropDown.value;\n            this.reRender(this.selectedMonth, Number.parseInt(newYear));\n        });\n        calendarDiv.appendChild(monthDropDown);\n        calendarDiv.appendChild(yearDropDown);\n        calendarDiv.appendChild(calendarTable);\n    }\n    reRender(month, year) {\n        let oldCalendarTable = document.getElementById(this.CALENDAR_TABLE_ID);\n        let newCalendarTable = CalendarView_CalendarView.getCalendarTable(this.CALENDAR_TABLE_ID, month, year);\n        oldCalendarTable === null || oldCalendarTable === void 0 ? void 0 : oldCalendarTable.replaceWith(newCalendarTable);\n    }\n}\nlet dp1 = new DatePicker_DatePicker("datepicker1", () => { });\ndp1.render(new Date().getMonth(), new Date().getFullYear());\nlet dp2 = new DatePicker_DatePicker("datepicker2", () => { });\ndp2.render(8, 2020);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90c2ZpbGVzL0Ryb3BEb3ducy50cz82ZjllIiwid2VicGFjazovLy8uL3RzZmlsZXMvVXRpbHMudHM/OWI1NSIsIndlYnBhY2s6Ly8vLi90c2ZpbGVzL0NhbGVuZGFyVmlldy50cz9kYTI2Iiwid2VicGFjazovLy8uL3RzZmlsZXMvRGF0ZVBpY2tlci50cz9lZGRiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFTyxNQUFNLGFBQWE7SUFHdEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQVUsRUFBRSxXQUFtQjtRQUNuRCxJQUFJLFdBQVcsR0FBRyxJQUFJO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQztRQUMvRCxJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUM3QyxLQUFLLElBQUksS0FBSyxHQUFHLElBQUksRUFBRSxLQUFLLElBQUksV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQUUsS0FBSyxDQUFDLEtBQUssR0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLO1NBQUU7UUFDbkYsSUFBSSxXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDbEQsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDbkQsWUFBWSxDQUFDLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sWUFBWTtJQUN2QixDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQVU7UUFDL0IsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pELElBQUksYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMs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QUFJLEdBQUcsR0FBRyxJQUFJLHFCQUFVLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztBQUNqRCxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUUzRCxJQUFJLEdBQUcsR0FBRyxJQUFJLHFCQUFVLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztBQUNqRCxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgRHJvcGRvd25PcHRpb25UeXBlID0gbnVtYmVyIHwgc3RyaW5nXG5cbmV4cG9ydCBjbGFzcyBEcm9wRG93blV0aWxzIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNT05USFMgPSBbXCJKYW51YXJ5XCIsIFwiRmVidXJhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXTtcblxuICAgIHN0YXRpYyBnZXRZZWFyc0Ryb3BEb3duKGlkOiBzdHJpbmcsIGN1cnJlbnRZZWFyOiBudW1iZXIpOiBIVE1MU2VsZWN0RWxlbWVudCB7XG4gICAgICAgIGlmIChjdXJyZW50WWVhciA8IDE5NzApIHRocm93IG5ldyBFcnJvcihcIldyb25nIFllYXIgRXhjZXB0aW9uXCIpXG4gICAgICAgIGxldCB5ZWFycyA9IG5ldyBBcnJheShjdXJyZW50WWVhciAtIDE5NzAgKyAxKVxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDE5NzA7IGluZGV4IDw9IGN1cnJlbnRZZWFyOyBpbmRleCsrKSB7IHllYXJzW2luZGV4LTE5NzBdID0gaW5kZXggfVxuICAgICAgICBsZXQgeWVhck9wdGlvbnMgPSBEcm9wRG93blV0aWxzLmdldERyb3BEb3duKHllYXJzKVxuICAgICAgICBsZXQgeWVhclNlbGVjdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKVxuICAgICAgICB5ZWFyU2VsZWN0b3IuaWQgPSBpZFxuICAgICAgICB5ZWFyT3B0aW9ucy5mb3JFYWNoKG9wdGlvbiA9PiB5ZWFyU2VsZWN0b3IuYWRkKG9wdGlvbikpXG4gICAgICAgIHJldHVybiB5ZWFyU2VsZWN0b3JcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0TW9udGhzRHJvcERvd24oaWQ6IHN0cmluZyk6IEhUTUxTZWxlY3RFbGVtZW50IHtcbiAgICAgICAgbGV0IG1vbnRoT3B0aW9ucyA9IERyb3BEb3duVXRpbHMuZ2V0RHJvcERvd24odGhpcy5NT05USFMpXG4gICAgICAgIGxldCBtb250aFNlbGVjdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKVxuICAgICAgICBtb250aFNlbGVjdG9yLmlkID0gaWRcbiAgICAgICAgbW9udGhPcHRpb25zLmZvckVhY2gob3B0aW9uID0+IG1vbnRoU2VsZWN0b3IuYWRkKG9wdGlvbikpXG4gICAgICAgIHJldHVybiBtb250aFNlbGVjdG9yXG4gICAgfSBcblxuICAgIHN0YXRpYyBnZXRNb250aEluZGV4KHZhbHVlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5NT05USFMuaW5kZXhPZih2YWx1ZSlcbiAgICB9XG5cbiAgIHByaXZhdGUgc3RhdGljIGdldERyb3BEb3duKGVsZW1lbnRzOiBBcnJheTxEcm9wZG93bk9wdGlvblR5cGU+KTogQXJyYXk8SFRNTE9wdGlvbkVsZW1lbnQ+IHtcbiAgICAgICAgbGV0IG9wdGlvbkVsZW1lbnRzID0gbmV3IEFycmF5PEhUTUxPcHRpb25FbGVtZW50PihlbGVtZW50cy5sZW5ndGgpXG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2gob3B0aW9uTmFtZT0+e1xuICAgICAgICAgICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIilcbiAgICAgICAgICAgIG9wdGlvbi5pZCA9IG9wdGlvbk5hbWUudG9TdHJpbmcoKVxuICAgICAgICAgICAgb3B0aW9uLnRleHQgPSBvcHRpb25OYW1lLnRvU3RyaW5nKClcbiAgICAgICAgICAgIG9wdGlvbkVsZW1lbnRzLnB1c2gob3B0aW9uKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gb3B0aW9uRWxlbWVudHNcbiAgICB9XG59IiwiY29uc3QgZXhjbHVkZUVuZCA9IChzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcikgPT4gZ2V0UmFuZ2Uoc3RhcnQsIGVuZCAtIDEpO1xuY29uc3QgZXhjbHVkZVN0YXJ0ID0gKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSA9PiBnZXRSYW5nZShzdGFydCArIDEsIGVuZCk7XG5jb25zdCBnZXRSYW5nZSA9IChzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IG51bWJlcltdID0+IHtcbiAgICBsZXQgYXJyYXkgPSBuZXcgQXJyYXkoKTtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgICAgYXJyYXkucHVzaChpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQge2V4Y2x1ZGVFbmQsIGV4Y2x1ZGVTdGFydCwgZ2V0UmFuZ2V9IiwiaW1wb3J0IHsgZ2V0UmFuZ2UsIGV4Y2x1ZGVTdGFydCB9IGZyb20gXCIuL1V0aWxzXCJcblxuZXhwb3J0IGNsYXNzIENhbGVuZGFyVmlldyB7XG4gICAgc3RhdGljIGdldENhbGVuZGFyVGFibGUoaWQ6IHN0cmluZywgbW9udGg6IG51bWJlciwgeWVhcjogbnVtYmVyKTogSFRNTFRhYmxlRWxlbWVudCB7XG4gICAgICAgIGxldCBjYWxlbmRhclRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpXG4gICAgICAgIGNhbGVuZGFyVGFibGUuaWQgPSBpZFxuICAgICAgICB0aGlzLmFkZENhbGVuZGFySGVhZGVyKGNhbGVuZGFyVGFibGUpXG4gICAgICAgIHRoaXMuYWRkQ2FsZW5kYXJXZWVrcyhjYWxlbmRhclRhYmxlLCBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSkpXG4gICAgICAgIHJldHVybiBjYWxlbmRhclRhYmxlXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgYWRkQ2FsZW5kYXJXZWVrcyhjYWxlbmRhclRhYmxlOiBIVE1MVGFibGVFbGVtZW50LCBkYXRlOiBEYXRlKSB7XG4gICAgICAgIGxldCBudW1kYXlzID0gZ2V0TnVtRGF5cyhkYXRlKVxuICAgICAgICBsZXQgW2ZpcnN0V2VlaywgZmlyc3RXZWVrZW5kXSA9IENhbGVuZGFyVmlldy5nZXRGaXJzdFdlZWsoZGF0ZSlcbiAgICAgICAgbGV0IG5leHRNb250aEluY2x1c2lvbnMgPSBnZXRSYW5nZSgxLCA2IC0gZ2V0TW9udGhFbmREYXkoZGF0ZSkpXG5cbiAgICAgICAgbGV0IGFkZGVkID0gMFxuICAgICAgICB3aGlsZShhZGRlZCA8IG51bWRheXMpIHtcbiAgICAgICAgICAgIGlmIChhZGRlZCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRSb3dBc0RheXMoY2FsZW5kYXJUYWJsZSwgZmlyc3RXZWVrKVxuICAgICAgICAgICAgICAgIGFkZGVkICs9IGZpcnN0V2Vla2VuZFxuICAgICAgICAgICAgfSBlbHNlIGlmIChhZGRlZCArIDcgPj0gbnVtZGF5cykge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUm93QXNEYXlzKGNhbGVuZGFyVGFibGUsIGV4Y2x1ZGVTdGFydChhZGRlZCwgbnVtZGF5cykuY29uY2F0KG5leHRNb250aEluY2x1c2lvbnMpKVxuICAgICAgICAgICAgICAgIGFkZGVkICs9IG51bWRheXMgLSBhZGRlZFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFJvd0FzRGF5cyhjYWxlbmRhclRhYmxlLCBleGNsdWRlU3RhcnQoYWRkZWQsIGFkZGVkICsgNykpXG4gICAgICAgICAgICAgICAgYWRkZWQgKz0gN1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0Rmlyc3RXZWVrKGRhdGU6IERhdGUpOiBbbnVtYmVyW10sIG51bWJlcl0ge1xuICAgICAgICBsZXQgZmlyc3REYXkgPSBnZXRNb250aFN0YXJ0RGF5KGRhdGUpXG4gICAgICAgIGxldCBwcmV2TW9udGhOdW1EYXlzID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIDApLmdldERhdGUoKVxuICAgICAgICBsZXQgZmlyc3RXZWVrZW5kID0gNyAtIGZpcnN0RGF5XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRVMgOiBcIiArIGV4Y2x1ZGVTdGFydChwcmV2TW9udGhOdW1EYXlzIC0gZmlyc3REYXksIHByZXZNb250aE51bURheXMpKVxuICAgICAgICByZXR1cm4gW2V4Y2x1ZGVTdGFydChwcmV2TW9udGhOdW1EYXlzIC0gZmlyc3REYXksIHByZXZNb250aE51bURheXMpLmNvbmNhdChnZXRSYW5nZSgxLCBmaXJzdFdlZWtlbmQpKSwgZmlyc3RXZWVrZW5kXVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGFkZFJvd0FzRGF5cyh0YWJsZTogSFRNTFRhYmxlRWxlbWVudCwgZGF5czogQXJyYXk8bnVtYmVyPikge1xuICAgICAgICBsZXQgcm93ID0gdGFibGUuaW5zZXJ0Um93KClcbiAgICAgICAgZGF5cy5mb3JFYWNoKGRheSA9PiB7XG4gICAgICAgICAgICBsZXQgY2VsbCA9IHJvdy5pbnNlcnRDZWxsKClcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF5LnRvU3RyaW5nKCkpXG4gICAgICAgICAgICBjZWxsLmFwcGVuZENoaWxkKHRleHQpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgYWRkQ2FsZW5kYXJIZWFkZXIodGFibGU6IEhUTUxUYWJsZUVsZW1lbnQpOiBIVE1MVGFibGVTZWN0aW9uRWxlbWVudCB7XG4gICAgICAgIGxldCBoZWFkID0gdGFibGUuY3JlYXRlVEhlYWQoKVxuICAgICAgICBsZXQgcm93ID0gaGVhZC5pbnNlcnRSb3coKVxuICAgICAgICBEQVlTLmZvckVhY2goZGF5ID0+IHtcbiAgICAgICAgICAgIGxldCB0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKVxuICAgICAgICAgICAgbGV0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXkpXG4gICAgICAgICAgICB0aC5hcHBlbmRDaGlsZCh0ZXh0KVxuICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHRoKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gaGVhZFxuICAgIH1cbn1cblxubGV0IERBWVMgPSBbXCJTVVwiLCBcIk1PXCIsIFwiVFVcIiwgXCJXRVwiLCBcIlRIXCIsIFwiRlJcIiwgXCJTQVwiXTtcblxubGV0IGdldE1vbnRoU3RhcnREYXkgPSAoZGF0ZTogRGF0ZSkgPT4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIDEpLmdldERheSgpO1xubGV0IGdldE1vbnRoRW5kRGF5ID0gKGRhdGU6IERhdGUpID0+IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgMCkuZ2V0RGF5KCk7XG5sZXQgZ2V0TnVtRGF5cyA9IChkYXRlOiBEYXRlKSA9PiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSArIDEsIDApLmdldERhdGUoKTsiLCJpbXBvcnQgeyBEcm9wRG93blV0aWxzIH0gZnJvbSBcIi4vRHJvcERvd25zXCI7XG5pbXBvcnQgeyBDYWxlbmRhclZpZXcgfSBmcm9tIFwiLi9DYWxlbmRhclZpZXdcIjtcblxuY2xhc3MgRGF0ZVBpY2tlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBNT05USF9EUk9QX0RPV05fSUQgPSBcIm1vbnRoLWRyb3AtZG93blwiXG4gICAgcHJpdmF0ZSByZWFkb25seSBZRUFSX0RST1BfRE9XTl9JRCA9IFwieWVhci1kcm9wLWRvd25cIlxuICAgIHByaXZhdGUgcmVhZG9ubHkgQ0FMRU5EQVJfVEFCTEVfSUQgPSBcImNhbGVuZGFyLXRhYmxlXCJcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaWQ6IHN0cmluZ1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb25jbGljazogKCkgPT4gdm9pZFxuXG4gICAgcHJpdmF0ZSBzZWxlY3RlZFllYXI6IG51bWJlciA9IDIwMjA7XG4gICAgcHJpdmF0ZSBzZWxlY3RlZE1vbnRoOiBudW1iZXIgPSAxO1xuXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgb25jbGljazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmlkID0gaWRcbiAgICAgICAgdGhpcy5vbmNsaWNrID0gb25jbGlja1xuICAgIH1cblxuICAgIHJlbmRlcihtb250aDogbnVtYmVyLCB5ZWFyOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE1vbnRoID0gTWF0aC5mbG9vcihtb250aClcbiAgICAgICAgdGhpcy5zZWxlY3RlZFllYXIgPSBNYXRoLmZsb29yKHllYXIpXG4gICAgICAgIGxldCBjYWxlbmRhckRpdjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKSFcbiAgICAgICAgbGV0IG1vbnRoRHJvcERvd246IEhUTUxTZWxlY3RFbGVtZW50ID0gRHJvcERvd25VdGlscy5nZXRNb250aHNEcm9wRG93bih0aGlzLk1PTlRIX0RST1BfRE9XTl9JRClcbiAgICAgICAgbGV0IHllYXJEcm9wRG93bjogSFRNTFNlbGVjdEVsZW1lbnQgPSBEcm9wRG93blV0aWxzLmdldFllYXJzRHJvcERvd24odGhpcy5ZRUFSX0RST1BfRE9XTl9JRCwgeWVhcilcbiAgICAgICAgbGV0IGNhbGVuZGFyVGFibGU6IEhUTUxUYWJsZUVsZW1lbnQgPSBDYWxlbmRhclZpZXcuZ2V0Q2FsZW5kYXJUYWJsZSh0aGlzLkNBTEVOREFSX1RBQkxFX0lELCBtb250aCwgeWVhcilcbiAgICAgICAgbW9udGhEcm9wRG93bi5zZWxlY3RlZEluZGV4ID0gdGhpcy5zZWxlY3RlZE1vbnRoXG4gICAgICAgIHllYXJEcm9wRG93bi5zZWxlY3RlZEluZGV4ID0gdGhpcy5zZWxlY3RlZFllYXJcbiAgICAgICAgbW9udGhEcm9wRG93bi5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBsZXQgbmV3TW9udGg6IHN0cmluZyA9IG1vbnRoRHJvcERvd24udmFsdWVcbiAgICAgICAgICAgIHRoaXMucmVSZW5kZXIoRHJvcERvd25VdGlscy5nZXRNb250aEluZGV4KG5ld01vbnRoKSwgdGhpcy5zZWxlY3RlZFllYXIpXG4gICAgICAgIH0pXG4gICAgICAgIHllYXJEcm9wRG93bi5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld1llYXI6IHN0cmluZyA9IHllYXJEcm9wRG93bi52YWx1ZVxuICAgICAgICAgICAgdGhpcy5yZVJlbmRlcih0aGlzLnNlbGVjdGVkTW9udGgsIE51bWJlci5wYXJzZUludChuZXdZZWFyKSlcbiAgICAgICAgfSlcbiAgICAgICAgY2FsZW5kYXJEaXYuYXBwZW5kQ2hpbGQobW9udGhEcm9wRG93bilcbiAgICAgICAgY2FsZW5kYXJEaXYuYXBwZW5kQ2hpbGQoeWVhckRyb3BEb3duKVxuICAgICAgICBjYWxlbmRhckRpdi5hcHBlbmRDaGlsZChjYWxlbmRhclRhYmxlKVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVSZW5kZXIobW9udGg6IG51bWJlciwgeWVhcjogbnVtYmVyKSB7XG4gICAgICAgIGxldCBvbGRDYWxlbmRhclRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5DQUxFTkRBUl9UQUJMRV9JRClcbiAgICAgICAgbGV0IG5ld0NhbGVuZGFyVGFibGU6IEhUTUxUYWJsZUVsZW1lbnQgPSBDYWxlbmRhclZpZXcuZ2V0Q2FsZW5kYXJUYWJsZSh0aGlzLkNBTEVOREFSX1RBQkxFX0lELCBtb250aCwgeWVhcikgXG4gICAgICAgIG9sZENhbGVuZGFyVGFibGU/LnJlcGxhY2VXaXRoKG5ld0NhbGVuZGFyVGFibGUpXG4gICAgfVxufVxuXG5sZXQgZHAxID0gbmV3IERhdGVQaWNrZXIoXCJkYXRlcGlja2VyMVwiLCAoKSA9PiB7fSlcbmRwMS5yZW5kZXIobmV3IERhdGUoKS5nZXRNb250aCgpLCBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkpXG5cbmxldCBkcDIgPSBuZXcgRGF0ZVBpY2tlcihcImRhdGVwaWNrZXIyXCIsICgpID0+IHt9KVxuZHAyLnJlbmRlcig4LCAyMDIwKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')}]);