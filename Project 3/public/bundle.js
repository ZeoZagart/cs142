!function(Q){var F={};function U(B){if(F[B])return F[B].exports;var l=F[B]={i:B,l:!1,exports:{}};return Q[B].call(l.exports,l,l.exports,U),l.l=!0,l.exports}U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},U.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},U.t=function(Q,F){if(1&F&&(Q=U(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(U.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var l in Q)U.d(B,l,function(F){return Q[F]}.bind(null,l));return B},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},U.p="public",U(U.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./tsfiles/DropDowns.ts\nclass DropDownUtils {\n    static getYearsDropDown(id, currentYear) {\n        if (currentYear < 1970)\n            throw new Error("Wrong Year Exception");\n        let years = new Array(currentYear - 1970 + 1);\n        for (let index = 1970; index <= currentYear; index++) {\n            years[index - 1970] = index;\n        }\n        let yearOptions = DropDownUtils.getDropDown(years);\n        let yearSelector = document.createElement("select");\n        yearSelector.id = id;\n        yearOptions.forEach(option => yearSelector.add(option));\n        return yearSelector;\n    }\n    static getMonthsDropDown(id) {\n        let monthOptions = DropDownUtils.getDropDown(this.MONTHS);\n        let monthSelector = document.createElement("select");\n        monthSelector.id = id;\n        monthOptions.forEach(option => monthSelector.add(option));\n        return monthSelector;\n    }\n    static getMonthIndex(value) {\n        return this.MONTHS.indexOf(value);\n    }\n    static getDropDown(elements) {\n        let optionElements = new Array(elements.length);\n        elements.forEach(optionName => {\n            let option = document.createElement("option");\n            option.id = optionName.toString();\n            option.text = optionName.toString();\n            optionElements.push(option);\n        });\n        return optionElements;\n    }\n}\nDropDownUtils.MONTHS = ["January", "Feburary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];\n\n// CONCATENATED MODULE: ./tsfiles/Utils.ts\nconst excludeEnd = (start, end) => getRange(start, end - 1);\nconst excludeStart = (start, end) => getRange(start + 1, end);\nconst getRange = (start, end) => {\n    let array = new Array();\n    for (let i = start; i <= end; i++) {\n        array.push(i);\n    }\n    return array;\n};\n\n\n// CONCATENATED MODULE: ./tsfiles/CalendarView.ts\n\nclass CalendarView_CalendarView {\n    static getCalendarTable(id, month, year) {\n        let calendarTable = document.createElement("table");\n        calendarTable.id = id;\n        this.addCalendarHeader(calendarTable);\n        this.addCalendarWeeks(calendarTable, new Date(year, month, 1));\n        return calendarTable;\n    }\n    static addCalendarWeeks(calendarTable, date) {\n        let numdays = getNumDays(date);\n        let [firstWeek, firstWeekend] = CalendarView_CalendarView.getFirstWeek(date);\n        let nextMonthInclusions = getRange(1, 6 - getMonthEndDay(date));\n        let added = 0;\n        while (added < numdays) {\n            if (added == 0) {\n                this.addRowAsDays(calendarTable, firstWeek);\n                added += firstWeekend;\n            }\n            else if (added + 7 >= numdays) {\n                this.addRowAsDays(calendarTable, excludeStart(added, numdays).concat(nextMonthInclusions));\n                added += numdays - added;\n            }\n            else {\n                this.addRowAsDays(calendarTable, excludeStart(added, added + 7));\n                added += 7;\n            }\n        }\n    }\n    static getFirstWeek(date) {\n        let firstDay = getMonthStartDay(date);\n        let prevMonthNumDays = new Date(date.getFullYear(), date.getMonth(), 0).getDate();\n        let firstWeekend = 7 - firstDay;\n        console.log("ES : " + excludeStart(prevMonthNumDays - firstDay, prevMonthNumDays));\n        return [excludeStart(prevMonthNumDays - firstDay, prevMonthNumDays).concat(getRange(1, firstWeekend)), firstWeekend];\n    }\n    static addRowAsDays(table, days) {\n        let row = table.insertRow();\n        days.forEach(day => {\n            let cell = row.insertCell();\n            let text = document.createTextNode(day.toString());\n            cell.appendChild(text);\n        });\n    }\n    static addCalendarHeader(table) {\n        let head = table.createTHead();\n        let row = head.insertRow();\n        DAYS.forEach(day => {\n            let th = document.createElement("th");\n            let text = document.createTextNode(day);\n            th.appendChild(text);\n            row.appendChild(th);\n        });\n        return head;\n    }\n}\nlet DAYS = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];\nlet getMonthStartDay = (date) => new Date(date.getFullYear(), date.getMonth(), 1).getDay();\nlet getMonthEndDay = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDay();\nlet getNumDays = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\n// CONCATENATED MODULE: ./tsfiles/DatePicker.ts\n\n\nclass DatePicker_DatePicker {\n    constructor(id, onclick) {\n        this.MONTH_DROP_DOWN_ID = "month-drop-down";\n        this.YEAR_DROP_DOWN_ID = "year-drop-down";\n        this.CALENDAR_TABLE_ID = "calendar-table";\n        this.selectedYear = 2020;\n        this.selectedMonth = 1;\n        this.id = id;\n        this.onclick = onclick;\n    }\n    render(month, year) {\n        this.selectedMonth = Math.floor(month);\n        this.selectedYear = Math.floor(year);\n        this.calendarDiv = document.getElementById(this.id);\n        let monthDropDown = DropDownUtils.getMonthsDropDown(this.MONTH_DROP_DOWN_ID);\n        let yearDropDown = DropDownUtils.getYearsDropDown(this.YEAR_DROP_DOWN_ID, year);\n        let calendarTable = CalendarView_CalendarView.getCalendarTable(this.CALENDAR_TABLE_ID, month, year);\n        monthDropDown.selectedIndex = this.selectedMonth;\n        yearDropDown.selectedIndex = yearDropDown.options.length - 1;\n        monthDropDown.addEventListener("change", (event) => {\n            let newMonth = monthDropDown.value;\n            this.reRenderTable(DropDownUtils.getMonthIndex(newMonth), this.selectedYear);\n        });\n        yearDropDown.addEventListener("change", (event) => {\n            let newYear = yearDropDown.value;\n            this.reRenderTable(this.selectedMonth, Number.parseInt(newYear));\n        });\n        this.calendarDiv.appendChild(monthDropDown);\n        this.calendarDiv.appendChild(yearDropDown);\n        this.calendarDiv.appendChild(calendarTable);\n    }\n    reRenderTable(month, year) {\n        let oldCalendarTable = this.calendarDiv.querySelector(`#${this.CALENDAR_TABLE_ID}`);\n        let newCalendarTable = CalendarView_CalendarView.getCalendarTable(this.CALENDAR_TABLE_ID, month, year);\n        this.selectedMonth = month;\n        this.selectedYear = year;\n        oldCalendarTable === null || oldCalendarTable === void 0 ? void 0 : oldCalendarTable.replaceWith(newCalendarTable);\n    }\n}\nlet dp1 = new DatePicker_DatePicker("datepicker1", () => { });\ndp1.render(new Date().getMonth(), new Date().getFullYear());\nlet dp2 = new DatePicker_DatePicker("datepicker2", () => { });\ndp2.render(8, 2020);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);